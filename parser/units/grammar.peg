{
package units

// Assumptions: the caller has split the input into lines.

// NB: including all the imports makes the pigeon parser generator run more quickly.
import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"log"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"sync"
	"unicode"
	"unicode/utf8"

	"github.com/playbymail/tribal/parser/ast"
)

func toAnySlice(v any) []any {
    if v == nil {
        return nil
    }
    return v.([]any)
}
}

// "," ch:CurrentHex "," SP "(" ph:PreviousHex ")"
UnitHeading <- u:UnitDeclaration "," un:UnitName "," ch:CurrentHex ",(" ph:PreviousHex ")" .* EOF {
    var uht ast.UnitHeading_t
//    uht.Id = u.(ast.UnitId_t)
//
//    for _, hon := range toAnySlice(honi) {
//        switch v := hon.(type) {
//        case ast.CurrentHex_t:
//            if uht.CurrentHex != nil {
//                if uht.CurrentHex.Error == nil {
//                    uht.CurrentHex.Error = ast.ErrMultipleCurrentHexes
//                }
//            } else {
//                uht.CurrentHex = &v
//            }
//        case ast.PreviousHex_t:
//            if uht.PreviousHex != nil {
//                if uht.PreviousHex.Error == nil {
//                    uht.PreviousHex.Error = ast.ErrMultiplePreviousHexes
//                }
//            } else {
//                uht.PreviousHex = &v
//            }
//        case ast.UnitName_t:
//            uht.Name = v
//        case []uint8:
//            log.Printf("unexpected input %q\n", string(v))
//            if uht.Error == nil {
//                uht.Error = ast.ErrUnexpectedInput
//            }
//        default:
//            panic(fmt.Errorf("unexpected type %T", v))
//        }
//    }
    return &uht, nil
}

UnitDeclaration <- u:CourierUnit {
    return u, nil
} / u:ElementUnit {
    return u, nil
} / u:FleetUnit {
    return u, nil
} / u:GarrisonUnit {
    return u, nil
} / u:TribeUnit {
    return u, nil
}

CourierUnit <- "courier" SP DIGIT DIGIT DIGIT DIGIT "c" [1-9] &"," {
    return ast.UnitId_t(string(c.text[8:14])), nil
}

ElementUnit <- "element" SP DIGIT DIGIT DIGIT DIGIT "e" [1-9] &"," {
    return ast.UnitId_t(string(c.text[8:14])), nil
}

FleetUnit <- "fleet" SP DIGIT DIGIT DIGIT DIGIT "f" [1-9] &"," {
    return ast.UnitId_t(string(c.text[6:12])), nil
}

GarrisonUnit <- "garrison" SP DIGIT DIGIT DIGIT DIGIT "g" [1-9] &"," {
    return ast.UnitId_t(string(c.text[9:15])), nil
}

TribeUnit <- "tribe" SP DIGIT DIGIT DIGIT DIGIT &"," {
    return ast.UnitId_t(string(c.text[6:10])), nil
}

UnitName <- (![,] .)*  &"," {
    return ast.UnitName_t(string(c.text)), nil
}

CurrentHex <- "current hex = " coords:Coordinates {
    log.Printf("parser: current hex %T\n", coords)
    return ast.CurrentHex_t{}, nil
}

PreviousHex <- "previous hex = " coords:Coordinates {
    log.Printf("parser: previous hex %T\n", coords)
    return ast.CurrentHex_t{}, nil
}

// Coordinates will return an ast.Coordinates_t if possible.
// Otherwise it will consume up to the next comma.

Coordinates <- LETTER LETTER SP DIGIT DIGIT DIGIT DIGIT {
    return ast.TextToCoordinates(c.text)
} / "##" SP DIGIT DIGIT DIGIT DIGIT {
    return ast.TextToCoordinates(c.text)
} / "n/a" {
    return ast.TextToCoordinates(c.text)
} / (![,)] .)* {
    return ast.TextToCoordinates(c.text)
}

EOF    = !.
DIGIT  = [0-9]
LETTER = [a-z]
SP     = [ \t]+
_      = [ \t]*
