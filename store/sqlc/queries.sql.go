// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package sqlc

import (
	"context"
)

const createClan = `-- name: CreateClan :exec

INSERT INTO clans (id, name)
VALUES (?1, ?2)
`

type CreateClanParams struct {
	ID   int64
	Name string
}

//	Copyright (c) 2024 Michael D Henderson. All rights reserved.
//
// --------------------------------------------------------------------------
// CreateClan creates a new clan.
func (q *Queries) CreateClan(ctx context.Context, arg CreateClanParams) error {
	_, err := q.db.ExecContext(ctx, createClan, arg.ID, arg.Name)
	return err
}

const createTurn = `-- name: CreateTurn :exec
INSERT INTO turns (id, year, month)
VALUES (?1, ?2, ?3)
`

type CreateTurnParams struct {
	ID    int64
	Year  int64
	Month int64
}

// --------------------------------------------------------------------------
// CreateTurn creates a new turn.
// If the turn already exists, it ignores the request.
func (q *Queries) CreateTurn(ctx context.Context, arg CreateTurnParams) error {
	_, err := q.db.ExecContext(ctx, createTurn, arg.ID, arg.Year, arg.Month)
	return err
}

const getReportByHash = `-- name: GetReportByHash :one
SELECT id, name, created_at
FROM report_files
WHERE hash = ?1
`

type GetReportByHashRow struct {
	ID        int64
	Name      string
	CreatedAt int64
}

// --------------------------------------------------------------------------
// GetReportByHash returns the report file with the given hash.
func (q *Queries) GetReportByHash(ctx context.Context, hash string) (GetReportByHashRow, error) {
	row := q.db.QueryRowContext(ctx, getReportByHash, hash)
	var i GetReportByHashRow
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const getTurnNo = `-- name: GetTurnNo :one
SELECT id
FROM turns
WHERE year = ?1
  AND month = ?2
`

type GetTurnNoParams struct {
	Year  int64
	Month int64
}

// --------------------------------------------------------------------------
// GetTurnNo returns the turn number for the given year and month.
func (q *Queries) GetTurnNo(ctx context.Context, arg GetTurnNoParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, getTurnNo, arg.Year, arg.Month)
	var id int64
	err := row.Scan(&id)
	return id, err
}
